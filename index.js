const express = require('express');
const { Telegraf } = require('telegraf');
const { makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion, Browsers, DisconnectReason } = require('@whiskeysockets/baileys');
const fs = require('fs');
const path = require('path');
const P = require('pino');

// Configurations
const config = require('./config');
const prefix = config.PREFIX;
const ownerNumber = config.OWNER_NUMBER;
const TELEGRAM_TOKEN = config.TELEGRAM_TOKEN || "YOUR_TELEGRAM_BOT_TOKEN";
const PORT = process.env.PORT || 3000;

// Initialize Express app
const app = express();
app.use(express.json());

// Initialize Telegram Bot
const bot = new Telegraf(TELEGRAM_TOKEN);

// WhatsApp Socket
let waSocket = null;

// Serve static files
app.use(express.static('public'));

// Status API
app.get('/api/status', (req, res) => {
    res.json({
        status: 'active',
        services: {
            whatsapp: waSocket ? 'connected' : 'disconnected',
            telegram: 'active'
        }
    });
});

// Telegram Pair Command
bot.command('pair', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length !== 2) {
        return ctx.reply('‚ùå ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫: /pair 94xxxxxxxxx');
    }

    const phoneNumber = args[1].trim();

    if (!/^94\d{9}$/.test(phoneNumber)) {
        return ctx.reply('‚ùå ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä! 94 ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (‡∂ã‡∂Ø‡∑è: 94711234567)');
    }

    ctx.reply('‚è≥ Pairing Code ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∂Ö‡∂≠‡∂ª‡∂≠‡∑î‡∂ª...');

    try {
        const tempSock = makeWASocket({
            printQRInTerminal: false,
            auth: { creds: {}, keys: {} }
        });

        const code = await tempSock.requestPairingCode(phoneNumber);

        await ctx.replyWithHTML(
            `‚úÖ <b>‡∂î‡∂∂‡∂ú‡∑ö WhatsApp Pairing ‡∂ö‡∑ö‡∂≠‡∂∫:</b> <code>${code}</code>\n\n` +
            '1. WhatsApp ‡∑Ä‡∑í‡∑Ä‡∑ò‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±\n' +
            '2. Settings ‚Üí Linked Devices ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∂±‡∑ä‡∂±\n' +
            '3. "Link a Device" ‡∂î‡∂∂‡∂±‡∑ä‡∂±\n' +
            '4. ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±\n\n' +
            '‚è≥ ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 10 ‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´ ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∑Ä‡∑ö.'
        );

        // 10 minutes‡∂ß ‡∂¥‡∑É‡∑ä‡∑É‡∑ö Temp Socket ‡∂Ö‡∂∫‡∑í‡∂±‡∑ä ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è
        setTimeout(() => {
            tempSock.end();
        }, 600000);

    } catch (err) {
        console.error('Pairing error:', err);
        ctx.reply('‚ùå ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑É‡∑î‡∑Ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.');
    }
});

// Connect to WhatsApp Permanently
async function connectToWhatsApp() {
    const { state, saveCreds } = await useMultiFileAuthState(path.join(__dirname, 'auth_info_baileys'));
    const { version } = await fetchLatestBaileysVersion();

    waSocket = makeWASocket({
        logger: P({ level: 'silent' }),
        printQRInTerminal: false, // QR Terminal ‡∂ë‡∂ö‡∂ß ‡∂ë‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ë
        auth: state,
        browser: Browsers.macOS('Safari'),
        version
    });

    waSocket.ev.on('connection.update', (update) => {
        const { connection, lastDisconnect } = update;
        if (connection === 'close') {
            console.log('WhatsApp disconnected');
            if (lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut) {
                setTimeout(() => connectToWhatsApp(), 5000);
            }
        } else if (connection === 'open') {
            console.log('‚úÖ WhatsApp connected successfully');
        }
    });

    waSocket.ev.on('creds.update', saveCreds);

    // Command Handling
    waSocket.ev.on('messages.upsert', async ({ messages }) => {
        const msg = messages[0];
        if (!msg.message) return;

        const type = Object.keys(msg.message)[0];
        const from = msg.key.remoteJid;
        const body = type === 'conversation' ? msg.message.conversation :
                     type === 'extendedTextMessage' ? msg.message.extendedTextMessage.text : '';

        if (body.startsWith(prefix)) {
            const command = body.slice(prefix.length).trim().split(' ')[0].toLowerCase();

            if (command === 'ping') {
                await waSocket.sendMessage(from, { text: 'Pong! üèì' });
            }
        }
    });
}

// Start Servers
app.listen(PORT, () => {
    console.log(`üåê Server running on port ${PORT}`);
    bot.launch().then(() => console.log('ü§ñ Telegram Bot Started'));
});

// Start WhatsApp Connection After Pairing Completed
// ‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä, Telegram Bot ‡∂≠‡∑î‡∑Ö ‡∑Ä‡∑ô‡∂±‡∂∏ Command ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑è‡∂Ω‡∑è WhatsApp Connect ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä
// connectToWhatsApp(); <-- ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑í‡∂ß ‡∂∏‡∑ô‡∂∫ ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±

// Cleanup
process.once('SIGINT', () => {
    bot.stop('SIGINT');
    if (waSocket) waSocket.end();
    process.exit(0);
});

process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
    if (waSocket) waSocket.end();
    process.exit(0);
});
